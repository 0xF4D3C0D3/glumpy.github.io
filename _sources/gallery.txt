.. title:: Glumpy gallery

.. role:: header
   :class: h4


Gallery
=======

.. container:: lead

   Some screenshots from the glumpy examples directory.

You will need the latest glumpy for the `github repository
<https://github.com/glumpy/>`_ to run them.

|

.. container:: row

   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/fireworks.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/fireworks.png

         .. container:: caption

            :header:`Fireworks`

            This example demonstrates simulation of fireworks using point
            sprites and has been adapted from the `OpenGL ES 2.0 Programming
            Guide <http://opengles-book.com/es2/index.html>`_.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/fireworks.py"/>
               <span class="fa fa-github"></span> Sources </a>

               <a type="button" class="btn btn-danger btn-xs" href="_static/movies/fireworks.mp4"/>
               <span class="glyphicon glyphicon-film"></span>Movie</a>


   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/galaxy.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/galaxy.png

         .. container:: caption

            :header:`Spiral galaxy`

            This is a simulation of a galaxy using the density wave theory as
            explained by Ingo Berg. All simulation details can be found on `his
            site <http://beltoforion.de/galaxy/galaxy_en.html>`_.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/galaxy.py"/>
               <span class="fa fa-github"></span> Sources
               </a>

               <a type="button" class="btn btn-danger btn-xs" href="_static/movies/galaxy.mp4"/>
               <span class="glyphicon glyphicon-film"></span>Movie</a>


   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/voronoi.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/voronoi.png

         .. container:: caption

            :header:`Voronoi diagrams`

            This example shows dynamic voronoi based on an `old technique
            <https://wwwx.cs.unc.edu/~geom/papers/documents/technicalreports/tr99011.pdf>`_
            where the hardware is used to compute the diagram using 3D occluded cones.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/voronoi.py"/>
               <span class="fa fa-github"></span> Sources
               </a>


   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/high-frequency.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/high-frequency.png

         .. container:: caption

            :header:`High-frequency signal`

            This example explains how to plot high-frequency functions by
            resampling the signal. More details on the `Syntopia
            <http://blog.hvidtfeldts.net/>`_ website and `Shadertoy
            <https://www.shadertoy.com/view/4sB3zz>`_

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/high-frequency.py">
               <span class="fa fa-github"></span> Sources </a>

               <a type="button" class="btn btn-danger btn-xs" href="_static/movies/high-frequency.mp4"/>
               <span class="glyphicon glyphicon-film"></span>Movie</a>



   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/geometry-surface.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/geometry-surface.png

         .. container:: caption

            :header:`Surface elevation`

            This example shows a 10x10 numpy array represented as a heightfield
            that is generated entirely on the GPU (using a default mesh).

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/geometry-surface.py"/>
               <span class="fa fa-github"></span> Sources
               </a>


   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/gloo-cloud.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/gloo-cloud.png

         .. container:: caption

            :header:`Point cloud`

            This example shows a 3D cloud of a million anti-aliased and stroked
            points animated in real-time. Most of them are hidden though !

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/gloo-cloud.py"/>
               <span class="fa fa-github"></span> Sources
               </a>


   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/mandelbrot.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/mandelbrot.png

         .. container:: caption

            :header:`Mandelbrot set`

            The mandatory Mandelbrot set computed in the GPU with single float
            precision even tough `double precision through emulation
            <https://www.thasler.org/blog/?p=93>`_ is possible.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/mandelbrot.py"/>
               <span class="fa fa-github"></span> Sources
               </a>


   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/geometry-parametric.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/geometry-parametric.png

         .. container:: caption

            :header:`Klein bottle`

            Just because we can ! This example demonstrates parametric surface
            generation and visualization with uv mapping.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/geometry-parametric.py"/>
               <span class="fa fa-github"></span> Sources
               </a>


   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/quiver.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/quiver.png

         .. container:: caption

            :header:`Quiver plot`

            Using GPU power, we can litteraly draw a quiver plot using a
            single quad. Adapted from Morgan McGuire `original idea on
            shadertoy <https://www.shadertoy.com/view/4s23DG>`_

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/quiver.py"/>
               <span class="fa fa-github"></span> Sources
               </a>


   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/polar-frame.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/polar-frame.png

         .. container:: caption

            :header:`Projected frame`

            Pixel perfect anti-aliased projected frame drawn by the GPU using a
            single quad. This can be adapted to any projection actually.

            .. raw:: html

               <!-- <button type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/gloo-frame.py"/>
               <span class="fa fa-github"></span> Sources</button> -->

               <button type="button" class="btn btn-danger btn-xs disabled="disabled"">
               <span class="fa fa-spinner fa-spin"></span> WIP</button>


   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/grayscott.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/grayscott.png

         .. container:: caption

            :header:`Reaction Diffusion`

            This example simulates a Reaction diffusion using Gray-Scott model
            largely inspired from this `great site
            <http://mrob.com/pub/comp/xmorphia/>`_ that gives all the details.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/grayscott.py"/>
               <span class="fa fa-github"></span> Sources
               </a>


   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/text.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/text.png

         .. container:: caption

            :header:`Hello world !`

            Text rendering uses both `regular textured glyph
            <http://jcgt.org/published/0002/01/04/>`_ with higher quality and
            `signed distance fields
            <http://www.valvesoftware.com/publications/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf>`_.
            `Glyphy <https://code.google.com/p/glyphy/>`_ to follow soon (hopefully).

            .. raw:: html

               <!-- <button type="button" class="btn btn-primary btn-xs">
               <span class="fa fa-github"></span> Sources</button> -->

               <button type="button" class="btn btn-danger btn-xs">
               <span class="fa fa-spinner fa-spin"></span> WIP</button>


   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/filter-blur.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/filter-blur.png

         .. container:: caption

            :header:`Post processing filters`

            Post-processing is applied through python context manager. This
            example combines two filters to produce Gaussian blur.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/filter-blur.py"/>
               <span class="fa fa-github"></span> Sources</a>


   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/shadertoy-colormaps.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/shadertoy-colormaps.png

         .. container:: caption

            :header:`Colormaps`

            Most colormaps can be computed just in time within GPU. But color
            lookup tables are also available through 1D textures.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/colormaps.py"/>
               <span class="fa fa-github"></span> Sources</a>


   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/gloo-terminal.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/gloo-terminal.png

         .. container:: caption

            :header:`UTF8 Terminal`

            This is a fast & failsafe terminal that allows to quickly display
            information on screen. It uses the UCS 6x13 bitmap character sets.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/gloo-terminal.py"/>
               <span class="fa fa-github"></span> Sources</a>


   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/collection-custom-lines.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/collection-custom-lines.png

         .. container:: caption

            :header:`Realtime signals`

            From an idea by Cyrille Rossant, this example shows 320 signals
            with 10,000 points each. Each signal can be zoomed in/out
            individually.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/collection-custom-lines.py"/>
               <span class="fa fa-github"></span>Sources</a>

   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/smoke.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/smoke.png

         .. container:: caption

            :header:`Smoke simulation`

            Porting the fluid simulation from the `little
            grasshopper <http://prideout.net/blog/?p=58>`_, this example
            shows a very nice smoke simulation using GPU.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/smoke/smoke.py"/>
               <span class="fa fa-github"></span>Sources</a>

               <a type="button" class="btn btn-danger btn-xs" href="_static/movies/smoke.mp4"/>
               <span class="glyphicon glyphicon-film"></span>Movie</a>


   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/gloo-magnify.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/gloo-magnify.png

         .. container:: caption

            :header:`Magnifying glass`

            A magnigying glass to help the visualization of a scatter
            plot. The position and level of zoom is controlled by the
            mouse.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/gloo-magnify.py"/>
               <span class="fa fa-github"></span>Sources</a>

   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/isocurves.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/isocurves.png

         .. container:: caption

            :header:`Isocurves`

            Isocurves can be direcly computed on the GPU (no need to
            precompute them). This is a very fast and accurate technique.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/isocurves.py"/>
               <span class="fa fa-github"></span>Sources</a>

   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/lorenz.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/lorenz.png

         .. container:: caption

            :header:`Lorenz attractor`

            Collections (glyphs, paths and segments) allow for efficient batch
            rendering of several objects with a few GL calls.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/lorenz.py"/>
               <span class="fa fa-github"></span>Sources</a>

   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/tiger.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/tiger.png

         .. container:: caption

            :header:`SVG rendering`

            SVG rendering using polygons and paths collections allow for efficient batch
            rendering of the tiger.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/tiger.py"/>
               <span class="fa fa-github"></span>Sources</a>

               <button type="button" class="btn btn-danger btn-xs disabled="disabled"">
               <span class="fa fa-spinner fa-spin"></span> WIP</button>


   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/graph.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/graph.png

         .. container:: caption

            :header:`Graphs`

            Graphs can be rendered using collections of markers and line
            segments allowing very fast display.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/graph.py"/>
               <span class="fa fa-github"></span>Sources</a>

   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/material-colors.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/material-colors.png

         .. container:: caption

            :header:`Colors`

            Named colors are easily accessible using colon notation
            and namespace such as `material
            <http://www.google.com/design/spec/style/color.html>`_, `web
            <http://www.w3.org/TR/css3-color/#html4>`_ and `svg
            <http://www.w3.org/TR/css3-color/#svg-color>`_.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/material-colors.py"/>
               <span class="fa fa-github"></span>Sources</a>


   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/protein.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/protein.png

         .. container:: caption

            :header:`Molecules`

            Molecules can be rendered very efficiently using sphere impostors
            and screen space ambient occlusion.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/protein.py"/>
               <span class="fa fa-github"></span>Sources</a>

               <button type="button" class="btn btn-danger btn-xs disabled="disabled"">
               <span class="fa fa-spinner fa-spin"></span> WIP</button>



   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/spiral.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/spiral.png

         .. container:: caption

            :header:`Matplotlib`

            Matplotlib API is slowly building up.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/spiral.py"/>
               <span class="fa fa-github"></span>Sources</a>

   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/polar-projection.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/polar-projection.png

         .. container:: caption

            :header:`Transforms`

            Virtually any kind of transform can be used.

            .. raw:: html

               <button type="button" class="btn btn-danger btn-xs disabled="disabled"">
               <span class="fa fa-spinner fa-spin"></span> WIP</button>

   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/spherical-harmonics.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/spherical-harmonics.png

         .. container:: caption

            :header:`Spherical Harmonics`

            Animated spherical harmonics computed on the GPU.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/spherical-harmonics.py"/>
               <span class="fa fa-github"></span>Sources</a>


   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/topojson.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/topojson.png

         .. container:: caption

            :header:`Topojson files`

            Rendering of the USA states and counties using Albers projection.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/topojson.py"/>
               <span class="fa fa-github"></span>Sources</a>


   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/skybox.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/skybox.png

         .. container:: caption

            :header:`Sky box`

            Standard skyboxes (texture cube).

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/skybox.py"/>
               <span class="fa fa-github"></span>Sources</a>


   .. container:: col-sm-6 col-md-3

      .. container:: thumbnail

         .. image:: _static/screenshots/thumbnails/cartopy.png
            :width: 100%
            :class: img-rounded
            :target: _static/screenshots/cartopy.png

         .. container:: caption

            :header:`Cartography`

            Cartographic projection.

            .. raw:: html

               <a type="button" class="btn btn-primary btn-xs"
               href="https://github.com/glumpy/glumpy/blob/master/examples/cartopy.py"/>
               <span class="fa fa-github"></span>Sources</a>

               <button type="button" class="btn btn-danger btn-xs disabled="disabled"">
               <span class="fa fa-spinner fa-spin"></span> WIP</button>
